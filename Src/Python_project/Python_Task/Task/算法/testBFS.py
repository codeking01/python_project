# auth: code_king
# time: 2022/10/18 19:19
# file: testBFS.py

# BFS(广度优先搜索)：是一种对图进行搜索的算法。
# 借助队列：先进先出的性质实现
# 假设我们一开始位于某个顶点（即起点），此时并不知道图的整体结构，而我们的目的是从起点开始顺着边搜索，直到到达指定顶点（即终点）。
# 在此过程中每走到一个顶点，就会判断一次它是否为终点。广度优先搜索会优先从离起点近的顶点开始搜索。
# graph = {
#     "A": ["B"],
#     "B": ["A", "C", "G", "K"],
#     "C": ["B", "D", 'M'],
#     "D": ["C", "E", "M"],
#     "E": ["D", "F"],
#     "F": ["E"],
#     "G": ["B"],
#     "K": ["B", "M"],
#     "M": ["C", "D", "K"],
# }

graph = {1: [2, 6, 7],
         2: [1, 3, 88],
         3: [2, 4, 8],
         4: [3, 5, 10],
         5: [4, 6, 17],
         6: [1, 5, 9],
         7: [1],
         8: [3],
         9: [6],
         10: [4, 11, 12, 21],
         11: [10],
         12: [10, 13, 17],
         13: [12, 14, 18],
         14: [13, 15, 84],
         15: [14, 16, 19],
         16: [15, 17, 20],
         17: [5, 12, 16],
         18: [13],
         19: [15],
         20: [16],
         21: [10, 22, 23],
         22: [21, 24, 25],
         23: [21, 26, 27],
         24: [22, 28, 29],
         25: [22, 30, 31],
         26: [23, 29, 32],
         27: [23],
         28: [24, 33, 34],
         29: [24, 26, 35],
         30: [25, 33, 52],
         31: [25],
         32: [26, 36, 37],
         33: [28, 30, 38],
         34: [28, 39, 40],
         35: [29, 39, 41],
         36: [32, 41, 42],
         37: [32],
         38: [33, 43, 119],
         39: [34, 35, 44],
         40: [34, 43, 45],
         41: [35, 36, 46],
         42: [36],
         43: [38, 40, 127],
         44: [39, 47, 48],
         45: [40, 47, 128],
         46: [41, 48, 49],
         47: [44, 45, 50],
         48: [44, 46, 51],
         49: [46],
         50: [47],
         51: [48],
         52: [30, 53, 54, 68],
         53: [52, 55, 56, 57],
         54: [52, 58, 59, 60],
         55: [53, 61, 62, 63],
         56: [53],
         57: [53],
         58: [54, 61, 64, 65],
         59: [54],
         60: [54],
         61: [55, 58, 66, 67],
         62: [55],
         63: [55],
         64: [58],
         65: [58],
         66: [61],
         67: [61],
         68: [52, 69, 70, 71],
         69: [68, 72, 73, 74],
         70: [68, 75, 76, 77],
         71: [68],
         72: [69, 78, 79, 93],
         73: [69],
         74: [69],
         75: [70, 78, 80, 81],
         76: [70],
         77: [70],
         78: [72, 75, 82, 83],
         79: [72],
         80: [75],
         81: [75],
         82: [78],
         83: [78, 111],
         84: [14, 85, 86, 87],
         85: [84],
         86: [84],
         87: [84],
         88: [2, 89, 90, 91],
         89: [88],
         90: [88],
         91: [88, 92, 93, 94],
         92: [91, 95, 96, 97],
         93: [72, 91, 98, 99],
         94: [91],
         95: [92, 100, 101, 102],
         96: [92],
         97: [92, 103, 104, 105],
         98: [93, 102, 103, 106],
         99: [93],
         100: [95],
         101: [95],
         102: [95, 98, 107, 108],
         103: [97, 98, 109, 110],
         104: [97],
         105: [97],
         106: [98],
         107: [102],
         108: [102],
         109: [103],
         110: [103],
         111: [83, 112],
         112: [111, 113, 114, 115],
         113: [112, 116, 117, 118],
         114: [112],
         115: [112],
         116: [113],
         117: [113],
         118: [113],
         119: [38, 120, 121],
         120: [119],
         121: [119, 122, 123, 124],
         122: [121],
         123: [121],
         124: [121, 125, 126, 127],
         125: [124],
         126: [124],
         127: [43, 124, 129, 130],
         128: [45],
         129: [127],
         130: [127]}


def BFS(graph, start):
    queue = []
    queue.append(start)
    seen = set()
    seen.add(start)
    parent = {start: None}

    while queue:
        vertex = queue.pop(0)
        # 查看出入队节点的相邻节点
        nodes = graph[vertex]
        for m in nodes:
            if m not in seen:
                queue.append(m)
                # 添加到访问过的集合里面
                seen.add(m)
                # 标记父节点
                parent[m] = vertex
        print(vertex)
    return parent


if __name__ == "__main__":
    result = BFS(graph, "A")
    print(result)
